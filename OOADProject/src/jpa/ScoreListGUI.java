package jpa;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;

import commonutil.AppImage;

/**
 *
 * @author Nisha
 */
public class ScoreListGUI extends JPanel {

	/**
	 * Creates new form ScoreListUpdated
	 * @param scoreTableController 
	 */
	public ScoreListGUI(ScoreTableController TableController) {
		initComponents();		
		this.scoreTableController = TableController;
	}

	public void addJTable() {
		// add the data and column names to a JTable
		tblScoreTable = new JTable(scoreTableController.getTableModel());
		tblScoreTable.setOpaque(false);

		// add a ListSelectionListener to the table
		tblScoreTable.getSelectionModel().addListSelectionListener(scoreTableController);

		// add the table to a scrollpane
		JScrollPane scrollPane = new JScrollPane(tblScoreTable);

		// create a window
		pnlTable.setLayout(new BorderLayout());
		pnlTable.add(scrollPane, BorderLayout.CENTER);
	}

	/////////////////%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% UPDATE TABLE ??

	public void setGameID(String gameID) {
		txtGameID.setText(gameID);
	}

	public String getGameID() {
		return txtGameID.getText();
	}    

	public void setFirstName(String firstname) {
		txtFirstName.setText(firstname);
	}

	public String getFirstName() {
		return txtFirstName.getText();
	}

	public void setLastName(String lastname) {
		txtLastName.setText(lastname);
	}

	public String getLastName() {
		return txtLastName.getText();
	}

	public void setGameTheme(String theme) {
		txtGameTheme.setText(theme);
	}

	public String getGameTheme() {
		return txtGameTheme.getText();
	}

	public void setGameLevel(String level) {
		txtGameLevel.setText(level);
	}

	public String getGameLevel() {
		return txtGameLevel.getText();
	}

	public void setGameScore(String score) {
		txtGameScore.setText(score);
	}

	public String getGameScore() {
		return txtGameScore.getText();
	}

	public void setGameTime(String time) {
		txtGameTime.setText(time);
	}

	public String getGameTime() {
		return txtGameTime.getText();
	}


	//updating JTable
	public void updateTable() {
		tblScoreTable.setModel(scoreTableController.getTableModel());
	}


	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">                          
	private void initComponents() {

		contentPane = new JPanel();
		lblBanner = new JLabel();
		lblFirstName = new JLabel();
		txtFirstName = new JTextField();
		pnlTable = new JPanel();
		lblLastName = new JLabel();
		txtLastName = new JTextField();
		testAdd = new JButton();
		testUpdate = new JButton();
		testDelete = new JButton();
		lblGameTheme = new JLabel();
		lblGameLevel = new JLabel();
		txtGameTheme = new JTextField();
		txtGameLevel = new JTextField();
		lblGameScore = new JLabel();
		lblGameTime = new JLabel();
		txtGameScore = new JTextField();
		txtGameTime = new JTextField();
		lblGameID = new JLabel();
		txtGameID = new JTextField();
		lblCreatedTime = new JLabel();
		txtCreatedTime = new JTextField();

		imgBackground = "Bck_ViewScore.png";
		background = new AppImage(imgBackground);

		testAdd.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				addButtonActionPerformed(e);
			}
		});

		testUpdate.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				addUpdateActionPerformed(e);

			}
		});

		testDelete.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				addDeleteActionPerformed(e);

			}
		});

		contentPane.setName("contentPanel"); // NOI18N
		contentPane.setOpaque(false);

		lblBanner.setText("Banner");
		lblBanner.setName("lblBanner"); // NOI18N

		lblFirstName.setText("First Name");
		lblFirstName.setToolTipText("Enter First Name");
		lblFirstName.setName("lblFirstName"); // NOI18N

		txtFirstName.setText("");
		txtFirstName.setToolTipText("");
		txtFirstName.setName("txtFirstName"); // NOI18N
		txtFirstName.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				txtFirstNameActionPerformed(evt);
			}
		});

		pnlTable.setName("pnlTable"); // NOI18N

		GroupLayout pnlTableLayout = new GroupLayout(pnlTable);
		pnlTable.setLayout(pnlTableLayout);
		pnlTableLayout.setHorizontalGroup(
				pnlTableLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGap(0, 0, Short.MAX_VALUE)
				);
		pnlTableLayout.setVerticalGroup(
				pnlTableLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGap(0, 252, Short.MAX_VALUE)
				);

		lblLastName.setText("Last Name");
		lblLastName.setName("lblLastName"); // NOI18N

		txtLastName.setText("");
		txtLastName.setName("txtLastName"); // NOI18N
		txtLastName.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				txtLastNameActionPerformed(evt);
			}
		});

		testAdd.setText("Add");
		testAdd.setToolTipText("");
		testAdd.setName("Add"); // NOI18N

		testUpdate.setText("Update");
		testUpdate.setName("Update"); // NOI18N

		testDelete.setText("Delete");
		testDelete.setName("Delete"); // NOI18N

		lblGameTheme.setText("Game Theme");
		lblGameTheme.setName("lblGameTheme"); // NOI18N

		lblGameLevel.setText("Game Level");
		lblGameLevel.setName("lblGameLevel"); // NOI18N

		txtGameTheme.setText("");
		txtGameTheme.setName("txtGameTheme"); // NOI18N

		txtGameLevel.setText("");
		txtGameLevel.setName("txtGameLevel"); // NOI18N

		lblGameScore.setText("Game Score");
		lblGameScore.setName("lblGameScore"); // NOI18N

		lblGameTime.setText("Game Time");
		lblGameTime.setName("lblGameTime"); // NOI18N

		txtGameScore.setText("");
		txtGameScore.setName("txtGameScore"); // NOI18N
		txtGameScore.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				txtGameScoreActionPerformed(evt);
			}
		});

		txtGameTime.setText("");
		txtGameTime.setName("txtGameTime"); // NOI18N

		lblGameID.setText("Game ID");
		lblGameID.setEnabled(false);
		lblGameID.setName("lblGameID"); // NOI18N

		txtGameID.setText("");
		txtGameID.setEnabled(false);
		txtGameID.setName("txtGameID"); // NOI18N

		lblCreatedTime.setText("Created Time");
		lblCreatedTime.setEnabled(false);
		lblCreatedTime.setName("lblCreatedTime"); // NOI18N

		txtCreatedTime.setText("");
		txtCreatedTime.setEnabled(false);
		txtCreatedTime.setName("txtCreatedTime"); // NOI18N

		GroupLayout contentPaneLayout = new GroupLayout(contentPane);
		contentPane.setLayout(contentPaneLayout);
		contentPaneLayout.setHorizontalGroup(
				contentPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addComponent(lblBanner, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addGroup(contentPaneLayout.createSequentialGroup()
						.addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.CENTER)
								.addGroup(contentPaneLayout.createSequentialGroup()
										.addGap(26, 26, 26)
										.addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
												.addGroup(contentPaneLayout.createSequentialGroup()
														.addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
																.addComponent(lblGameTheme, GroupLayout.Alignment.CENTER, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																.addComponent(lblLastName, GroupLayout.Alignment.CENTER, GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE))
																.addGap(18, 18, 18)
																.addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
																		.addComponent(txtLastName)
																		.addComponent(txtGameTheme)))
																		.addGroup(contentPaneLayout.createSequentialGroup()
																				.addComponent(lblGameLevel, GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE)
																				.addGap(32, 32, 32)
																				.addComponent(txtGameLevel, GroupLayout.PREFERRED_SIZE, 227, GroupLayout.PREFERRED_SIZE))
																				.addGroup(contentPaneLayout.createSequentialGroup()
																						.addComponent(lblFirstName, GroupLayout.PREFERRED_SIZE, 91, GroupLayout.PREFERRED_SIZE)
																						.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
																						.addComponent(txtFirstName, GroupLayout.PREFERRED_SIZE, 226, GroupLayout.PREFERRED_SIZE)))
																						.addGap(139, 139, 139)
																						.addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
																								.addComponent(lblGameScore, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																								.addComponent(lblGameTime, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																								.addComponent(lblGameID, GroupLayout.PREFERRED_SIZE, 88, GroupLayout.PREFERRED_SIZE)
																								.addComponent(lblCreatedTime, GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE))
																								.addGap(18, 18, 18)
																								.addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
																										.addComponent(txtGameTime, GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
																										.addComponent(txtGameScore, GroupLayout.PREFERRED_SIZE, 226, GroupLayout.PREFERRED_SIZE)
																										.addComponent(txtGameID)
																										.addComponent(txtCreatedTime))
																										.addGap(0, 0, Short.MAX_VALUE))
																										.addGroup(contentPaneLayout.createSequentialGroup()
																												.addContainerGap()
																												.addComponent(pnlTable, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
																												.addGroup(contentPaneLayout.createSequentialGroup()
																														.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																														.addComponent(testAdd, GroupLayout.PREFERRED_SIZE, 98, GroupLayout.PREFERRED_SIZE)
																														.addGap(46, 46, 46)
																														.addComponent(testUpdate)
																														.addGap(43, 43, 43)
																														.addComponent(testDelete)
																														.addGap(269, 269, 269)))
																														.addContainerGap())
				);
		contentPaneLayout.setVerticalGroup(
				contentPaneLayout.createParallelGroup(GroupLayout.Alignment.CENTER)
				.addGroup(contentPaneLayout.createSequentialGroup()
						.addComponent(lblBanner, GroupLayout.PREFERRED_SIZE, 50, GroupLayout.PREFERRED_SIZE)
						.addGap(41, 41, 41)
						.addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
								.addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
										.addComponent(lblFirstName, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE)
										.addComponent(txtFirstName, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE)
										.addComponent(lblGameScore, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE))
										.addGroup(contentPaneLayout.createSequentialGroup()
												.addGap(3, 3, 3)
												.addComponent(txtGameScore)))
												.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
												.addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
														.addComponent(lblLastName, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE)
														.addComponent(txtLastName, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE)
														.addComponent(lblGameTime, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE)
														.addComponent(txtGameTime, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE))
														.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
														.addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
																.addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
																		.addComponent(lblGameID, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																		.addComponent(txtGameID, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
																		.addComponent(lblGameTheme, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																		.addComponent(txtGameTheme))
																		.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
																		.addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
																				.addComponent(lblGameLevel, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE)
																				.addComponent(txtGameLevel, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE)
																				.addComponent(lblCreatedTime, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE)
																				.addComponent(txtCreatedTime, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE))
																				.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
																				.addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
																						.addComponent(testAdd)
																						.addComponent(testUpdate)
																						.addComponent(testDelete))
																						.addGap(40, 40, 40)
																						.addComponent(pnlTable, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
																						.addContainerGap())
				);

		GroupLayout layout = new GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addComponent(contentPane, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
						.addComponent(contentPane, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addGap(0, 0, Short.MAX_VALUE))
				);
	}// </editor-fold>      


	@Override
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		g.drawImage(background.loadBackGroundImage(), 1, 0, getWidth(), getHeight() , null);
		lblBanner.setIcon(new ImageIcon("image\\frugal banner.jpg"));
	}

	private void txtFirstNameActionPerformed(java.awt.event.ActionEvent evt) {                                             
		// TODO add your handling code here:
	}                                            

	private void txtLastNameActionPerformed(java.awt.event.ActionEvent evt) {                                            
		// TODO add your handling code here:
	}                                           

	private void txtGameScoreActionPerformed(java.awt.event.ActionEvent evt) {                                             
		// TODO add your handling code here:
	}               

	//TEST ADD BUTTON
	private void addButtonActionPerformed(ActionEvent evt) {
		//add row
		String[] data_array = new String[8];
		data_array[0] = "default";		//autoincrement Primary key
		data_array[1] = getFirstName();
		data_array[2] = getLastName();
		data_array[3] = getGameTheme();
		data_array[4] = getGameLevel();
		data_array[5] = getGameScore();
		data_array[6] = getGameTime();
		data_array[7] = "NOW()";		//insert current time in DB

		//send all data to table controller
		scoreTableController.addRow(data_array);
	}

	//Update button action
	private void addUpdateActionPerformed(ActionEvent e) {
		String[] data_array = new String[7];
		data_array[0] = getGameID();
		data_array[1] = getFirstName();
		data_array[2] = getLastName();
		data_array[3] = getGameTheme();
		data_array[4] = getGameLevel();
		data_array[5] = getGameScore();
		data_array[6] = getGameTime();

		//send all data to table controller
		scoreTableController.updateRow(data_array);
	}


	//delete row
	private void addDeleteActionPerformed(ActionEvent e) {
		String gameid = getGameID();	

		//send all data to table controller
		scoreTableController.deleteRow(gameid);
	}

	// Variables declaration - do not modify                     
	private JPanel contentPane;
	private JLabel lblBanner;
	private JLabel lblCreatedTime;
	private JLabel lblFirstName;
	private JLabel lblGameID;
	private JLabel lblGameLevel;
	private JLabel lblGameScore;
	private JLabel lblGameTheme;
	private JLabel lblGameTime;
	private JLabel lblLastName;
	private JPanel pnlTable;
	private JButton testAdd;
	private JButton testDelete;
	private JButton testUpdate;
	private JTextField txtCreatedTime;
	private JTextField txtFirstName;
	private JTextField txtGameID;
	private JTextField txtGameLevel;
	private JTextField txtGameScore;
	private JTextField txtGameTheme;
	private JTextField txtGameTime;
	private JTextField txtLastName;
	private ScoreTableController scoreTableController;
	private JTable tblScoreTable;
	private AppImage background;
	private String imgBackground;

	// End of variables declaration                   
}
